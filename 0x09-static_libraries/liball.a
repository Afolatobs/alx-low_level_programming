!<arch>
0-isupper.c/    0           0     0     644     217       `
#include "main.h"

/**
 * _isupper - check if uppercase letters
 * @c: char to check
 * Return: if uppercase return 1, else return 0
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);

	return (0);
}

0-memset.c/     0           0     0     644     376       `
#include "main.h"

/**
 * _memset - program fills a block of memory with a specfic value
 * @s: starting address of memory to be filled
 * @b: the desired value
 * @n: number of bytes to be changed
 * Return: change array with new value for n bytes
 */

char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     364       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 * @dest: entered value
 * @src: entered value
 * Return: void
 */

char *_strcat(char *dest, char *src)
{
	int x;
	int y;

	x = 0;
		while (dest[x] != '\0')
		{
			x++;
		}
	y = 0;
		while (src[y] != '\0')
		{
			dest[x] = src[y];
			x++;
			y++;
		}
		dest[x] = '\0';
		return (dest);
}
100-atoi.c/     0           0     0     644     435       `
#include "main.h"

/**
 * _atoi - to converta string into integer
 * @s: the string to use in program
 * Return: integer
 */

int _atoi(char *s)
{
	int sig = 1, a = 0;
	unsigned int unsig = 0;

	while (!(s[a] <= '9' && s[a] >= '0') && s[a] != '\0')
	{
		if (s[a] == '-')
			sig *= -1;
		a++;
	}
	while (s[a] <= '9' && (s[a] >= '0' && s[a] != '\0'))
	{
		unsig = (unsig * 10) + (s[a] - '0');
		a++;
	}
	unsig *= sig;
	return (unsig);
}

1-isdigit.c/    0           0     0     644     187       `
#include "main.h"

/**
 * _isdigit - checks for a digit
 * @c: int to be checked
 * Return: 1 if c is a digit, 0 if otherwise
 */

int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     358       `
#include "main.h"

/**
 * _memcpy - a function thatcopies memory area
 * @dest: location where is stored
 * @src: memory is copied
 * @n: number of copied
 * Return: copied memory with n byted changed
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int f = 0;
	int j = n;

	for (; f < j ; f++)
	{
		dest[f] = src[f];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     416       `
#include "main.h"

/**
 * _strncat - function concatenate two strings
 * using at most n bytes from src
 * @dest: entered value
 * @src: entered value
 * @n: entered value
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int x;
	int y;

	x = 0;
	while (dest[x] != '\0')
	{
		x++;
	}
	y = 0;
	while (y < n && src[y] != '\0')
	{
	dest[x] = src[y];
	x++;
	y++;
	}
	dest[x] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     242       `
#include "main.h"

/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */

char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);

	}

	return (0);
}

2-strlen.c/     0           0     0     644     208       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: string
 * Return: length
 */

int _strlen(char *s)
{
	int longi = 0;

	while (*s != '\0')
	{
		longi++;
		s++;
	}

	return (longi);
}
2-strncpy.c/    0           0     0     644     326       `
#include "main.h"

/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int j = 0;

	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
			j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
			j++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     203       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 * @c: the character to check
 * Return: 1 if c is lowercase, 0 otherwise
 */

int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     216       `
#include "main.h"

/**
 * _puts - program prints a string to stdout
 * @str: the string to be printed
 * _putchar priints a new line
 */

void _puts(char *str)
{
	while (*str)
		_putchar(*str++);

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     307       `
#include "main.h"

/**
 * _strcmp - program compare string values
 * @s1: input value
 * @s2: input value
 * Return: s1[a] - s2[a]
 */

int _strcmp(char *s1, char *s2)
{
	int a = 0;

	while (s1[a] != '\0' && s2[a] != '\0')
	{
		if (s1[a] != s2[a])
		{
			return (s1[a] - s2[a]);
		}
	a++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     383       `
#include "main.h"

/**
 * _strspn - program entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (success)
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int i;

	while (*s)
	{
		for (i = 0 ; accept[i] ; i++)
		{
			if (*s == accept[i])
			{
				n++;
				break;
			}
			else if (accept[i + 1] == '\0')
				return (n);
		}
		i++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     255       `
#include "main.h"

/**
 * _isalpha - program checks for alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter and return 0 if its not
 */

int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     295       `
#include "main.h"

/**
 * _strpbrk - program entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (success)
 */

char *_strpbrk(char *s, char *accept)
{
	int p;

	while (*s)
	{
		for (p = 0 ; accept[p] ; p++)
		{
			if (*s == accept[p])
				return (s);
		}
		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     376       `
#include "main.h"

/**
 * _strstr - program entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (success)
 */

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0' ; haystack++)
	{
		char *f = haystack;
		char *g = needle;

		while (*f == *g && *g != '\0')
		{
			f++;
			g++;
		}
		if (*g == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     224       `
#include "main.h"

/**
 * _abs - program conputes the absolute value of an integer
 * @n: the integer to check
 * Return: the absolute value of integer
 */

int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     0           0     0     644     340       `
#include "main.h"

/**
 * char *_strcpy - program copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string value
 */

char *_strcpy(char *dest, char *src)
{
	int x = 0;
	int y = 0;

	while (*(src + x) != '\0')
	{
		x++;
	}
	for ( ; y < x ; y++)
	{
		dest[y] = src[y];
	}
	dest[x] = '\0';
	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

